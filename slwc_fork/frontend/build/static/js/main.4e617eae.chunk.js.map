{"version":3,"sources":["LightweightCharts.tsx","index.tsx"],"names":["Chart","LightweightChartsMultiplePanes","chartsData","useRenderData","args","chartsContainerRef","useRef","chartElRefs","Array","length","fill","chartRefs","useEffect","find","ref","current","forEach","i","_step","chart","createChart","_objectSpread","height","width","clientWidth","_iterator","_createForOfIteratorHelper","series","s","n","done","value","chartSeries","type","options","priceScale","priceScaleId","applyOptions","setData","data","markers","setMarkers","err","e","f","subscribeClick","param","point","time","prices","el","idx","values","_toConsumableArray","seriesData","push","title","Streamlit","setComponentValue","timeScale","fitContent","charts","map","c","subscribeVisibleTimeRangeChange","filter","rightOffset","scrollPosition","subscribeVisibleLogicalRangeChange","range","setVisibleLogicalRange","from","to","remove","React","createElement","id","concat","key","ReactDOM","render","StrictMode","StreamlitProvider","LightweightCharts","document","getElementById"],"mappings":"mRAgBKA,EAAK,SAALA,GAAK,OAALA,EAAK,qBAALA,EAAK,6BAALA,EAAK,+BAALA,EAAK,qBAALA,EAAK,mBAALA,EAAK,mCAALA,EAAK,CAALA,GAAK,IA2IKC,EAlImC,WAGhD,IACMC,EADaC,0BACWC,KAAa,OAErCC,EAAqBC,iBAAuB,MAC5CC,EAAcC,MAAMN,EAAWO,QAAQC,KAAKJ,iBAAuB,OACnEK,EAAYL,iBAAoB,IA4GpC,OA1GAM,qBAAU,WACR,IAAIL,EAAYM,MAAK,SAACC,GAAG,OAAMA,EAAIC,WAAnC,CAEAR,EAAYS,SAAQ,SAACF,EAAKG,GACxB,IAQyCC,EARnCC,EAAmBR,EAAUI,QAAQE,GAAKG,YAC9CN,EAAIC,QAAOM,YAAA,CACTC,OAAQ,IACRC,MAAOhB,EAAYU,GAAGF,QAAQS,aAC3BtB,EAAWe,GAAGE,QAEnBM,EAAAC,YAEmBxB,EAAWe,GAAGU,QAAM,IAAzC,IAAAF,EAAAG,MAAAV,EAAAO,EAAAI,KAAAC,MAA0C,CAAC,IAAhCH,EAAMT,EAAAa,MAGTC,EAAcb,EAAMnB,EAAM2B,EAAOM,OAAON,EAAOO,SAElDP,EAAOQ,YACRhB,EAAMgB,WAAWR,EAAOO,QAAQE,cAAgB,IAAIC,aAAaV,EAAOQ,YAE1EH,EAAYM,QAAQX,EAAOY,MAExBZ,EAAOa,SACRR,EAAYS,WAAWd,EAAOa,UAIlC,MAAAE,GAAAjB,EAAAkB,EAAAD,GAAA,QAAAjB,EAAAmB,IACAzB,EAAM0B,gBAAe,SAACC,GACpB,GAAKA,EAAMC,OAAUD,EAAME,KAA3B,CAEA,IAAMC,EAAgB,GAEtB/C,EAAWc,SAAQ,SAACkC,GAClBA,EAAGvB,OAAOX,SAAQ,SAACW,EAAawB,GAE9B,IAAMC,EAASC,YAAKP,EAAMQ,WAAWF,UAAWD,GAChDF,EAAOM,KAAK,CACV,MAAS5B,EAAO6B,MAChB,KAAQ7B,EAAOM,KACfmB,iBAKNK,YAAUC,kBAAkB,CAC1B,KAAQZ,EAAME,KACdC,eAcJ9B,EAAMwC,YAAYC,gBAIpB,IAAMC,EAASlD,EAAUI,QAAQ+C,KAAI,SAACC,GAAC,OAAKA,KAiC5C,OA/BG7D,EAAWO,OAAS,GAErBoD,EAAO7C,SAAQ,SAACG,GACTA,IAELA,EAAMwC,YAAYK,iCAAgC,SAACrB,GACjDkB,EACGI,QAAO,SAACF,GAAC,OAAKA,IAAM5C,KACpBH,SAAQ,SAAC+C,GACRA,EAAEJ,YAAYtB,aAAa,CACzB6B,YAAa/C,EAAMwC,YAAYQ,yBAKvChD,EAAMwC,YAAYS,oCAAmC,SAACC,GAChDA,GACFR,EACGI,QAAO,SAACF,GAAC,OAAKA,IAAM5C,KACpBH,SAAQ,SAAC+C,GACRA,EAAEJ,YAAYW,uBAAuB,CACnCC,KAAW,OAALF,QAAK,IAALA,OAAK,EAALA,EAAOE,KACbC,GAAS,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOG,eASlB,WACLX,EAAO7C,SAAQ,SAACG,GACdA,EAAMsD,gBAIT,CAAEvE,EAAYK,EAAaI,IAG5B+D,IAAAC,cAAA,OAAK7D,IAAKT,GACPE,EAAYuD,KAAI,SAAChD,EAAKG,GAAC,OACtByD,IAAAC,cAAA,OACE7D,IAAKA,EACL8D,GAAE,sBAAAC,OAAwB5D,GAC1B6D,IAAG,sBAAAD,OAAwB5D,UC9IvC8D,IAASC,OACPN,IAAAC,cAACD,IAAMO,WAAU,KACfP,IAAAC,cAACO,oBAAiB,KAChBR,IAAAC,cAACQ,EAAiB,QAGtBC,SAASC,eAAe,W","file":"static/js/main.4e617eae.chunk.js","sourcesContent":["import { Streamlit } from \"streamlit-component-lib\"\nimport { useRenderData } from \"streamlit-component-lib-react-hooks\"\nimport {\n  ChartOptions,\n  createChart,\n  IChartApi,\n  MouseEventParams,\n} from \"lightweight-charts\"\n\nimport React, { useRef, useEffect } from \"react\"\n\ninterface ChartsDataItems {\n  chart: ChartOptions;\n  series: any;\n}\n\nenum Chart{\n    Area = 'addAreaSeries',\n    Baseline = 'addBaselineSeries',\n    Histogram = 'addHistogramSeries',\n    Line = 'addLineSeries',\n    Bar = 'addBarSeries',\n    Candlestick = 'addCandlestickSeries',\n}\n\nconst LightweightChartsMultiplePanes: React.VFC = () => {\n\n  // { args: object, disabled: boolean, theme: object } from Streamlit\n  const renderData = useRenderData()\n  const chartsData = renderData.args[\"charts\"]\n\n  const chartsContainerRef = useRef<HTMLDivElement>(null)\n  const chartElRefs = Array(chartsData.length).fill(useRef<HTMLDivElement>(null))\n  const chartRefs = useRef<IChartApi[]>([])\n\n    useEffect(() => {\n      if (chartElRefs.find((ref) => !ref.current)) return;\n\n      chartElRefs.forEach((ref, i) => {\n        const chart: IChartApi = chartRefs.current[i] = createChart(\n          ref.current as HTMLDivElement,{\n            height: 300,\n            width: chartElRefs[i].current.clientWidth,\n            ...chartsData[i].chart,\n          }\n        );\n\n        for (const series of chartsData[i].series){\n\n          // @ts-ignore - dynamic access to IChartApi methods (e.g.: chart.addLineSeries() )\n          const chartSeries = chart[Chart[series.type]](series.options)\n\n          if(series.priceScale)\n            chart.priceScale(series.options.priceScaleId || '').applyOptions(series.priceScale)\n\n          chartSeries.setData(series.data)\n\n          if(series.markers)\n            chartSeries.setMarkers(series.markers)\n\n        }\n\n        // user clicked the 'pointer'\n        chart.subscribeClick((param: MouseEventParams) => {\n          if (!param.point || !param.time) { return }\n\n          const prices: any[] = []\n\n          chartsData.forEach((el: ChartsDataItems) => {\n            el.series.forEach((series: any, idx: number) => {\n              // @ts-ignore - get the whole set by idx \n              const values = [ ...param.seriesData.values() ][idx]\n              prices.push({\n                'title': series.title,\n                'type': series.type,\n                values\n              })\n            })\n          })\n\n          Streamlit.setComponentValue({\n            'time': param.time,\n            prices\n          })\n\n        })\n\n        // user moved the 'pointer'\n        // chart.subscribeCrosshairMove(param => {\n        //   console.log('CrossHair',param)\n        // })\n\n        // chart.timeScale().subscribeVisibleTimeRangeChange(param => {\n        //   console.log('TimeRangeChange',param)\n        // });\n\n        chart.timeScale().fitContent();\n\n      })\n  \n      const charts = chartRefs.current.map((c) => c as IChartApi);\n      \n      if(chartsData.length > 1){ // sync charts\n\n        charts.forEach((chart) => {\n          if (!chart) return;\n\n          chart.timeScale().subscribeVisibleTimeRangeChange((e) => {\n            charts\n              .filter((c) => c !== chart)\n              .forEach((c) => {\n                c.timeScale().applyOptions({\n                  rightOffset: chart.timeScale().scrollPosition()\n                })\n              })\n          })\n\n          chart.timeScale().subscribeVisibleLogicalRangeChange((range) => {\n            if (range) {\n              charts\n                .filter((c) => c !== chart)\n                .forEach((c) => {\n                  c.timeScale().setVisibleLogicalRange({\n                    from: range?.from,\n                    to: range?.to\n\n      }) }) } }) }) }\n\n      // const handleResize = () => {\n      //   chart.applyOptions({ width: chartsContainerRef?.current?.clientWidth })\n      // }\n      // window.addEventListener('resize', handleResize)\n\n      return () => { // required because how useEffect() works\n        charts.forEach((chart) => {\n          chart.remove()\n        })\n      }\n\n    }, [ chartsData, chartElRefs, chartRefs])\n\n    return (\n      <div ref={chartsContainerRef}>\n        {chartElRefs.map((ref, i) => (\n          <div\n            ref={ref}\n            id={`lightweight-charts-${i}`}\n            key={`lightweight-charts-${i}`}\n          />\n        ))}\n      </div>\n    )\n\n}\n\nexport default LightweightChartsMultiplePanes\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { StreamlitProvider } from \"streamlit-component-lib-react-hooks\"\nimport LightweightCharts from \"./LightweightCharts\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitProvider>\n      <LightweightCharts />\n    </StreamlitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}